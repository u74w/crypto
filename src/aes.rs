pub struct Aes {
    pub state: Vec<Vec<u8>>,
    round_keys: Vec<u32>,
    nk: usize,
    nr: usize,
    nb: usize,
}

impl Aes {
    const S_BOX: [[u8; 16]; 16] = [
        [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
        [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
        [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
        [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
        [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
        [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
        [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
        [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
        [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
        [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
        [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
        [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
        [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
        [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
        [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
        [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16],
    ];
    const INV_S_BOX: [[u8; 16]; 16] = [
        [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
        [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
        [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
        [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
        [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
        [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
        [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
        [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
        [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
        [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
        [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
        [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
        [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
        [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
        [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
        [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d],
    ];
    const RCON: [u32; 10] = [
        0x0100_0000, 0x0200_0000, 0x0400_0000, 0x0800_0000,
        0x1000_0000, 0x2000_0000, 0x4000_0000, 0x8000_0000,
        0x1b00_0000, 0x3600_0000,
    ];

    pub fn new(input: Vec<Vec<u8>>, cipher_key: &Vec<u32>, key_size: usize) -> Aes {
        let nk;
        let nr;
        match key_size {
            128 => {
                nk = 4;
                nr = 10;
            },
            _ => panic!("invalid AES type"),
        }
        let round_keys: Vec<u32> = Aes::key_expansion(cipher_key, nr);
        Aes {
            state: input,
            round_keys: round_keys,
            nk: nk,
            nr: nr,
            nb: 4,
        }
    }

    pub fn cipher(&mut self) {
        self.add_round_key(0);
        for round in 1..self.nr {
            self.sub_bytes();
            self.shift_rows();
            self.mix_columns();
            self.add_round_key(round);
        }
        self.sub_bytes();
        self.shift_rows();
        self.add_round_key(self.nr);
    }

    fn key_expansion(key: &Vec<u32>, nr: usize) -> Vec<u32> {
        let mut w: Vec<u32> = Vec::new();
        for k in key {
            w.push(*k);
        }
        for i in key.len()..4*(nr+1) {
            let mut temp: u32 = *w.last().unwrap();
            if i % key.len() == 0 {
                temp = temp.rotate_left(8);
                temp = Aes::sub_word(temp);
                temp ^= Aes::RCON[i / key.len() - 1];
            }
            w.push(w[i - key.len()] ^ temp);
        }
        return w;
    }

    fn sub_bytes(&mut self) {
        for r in 0..self.state.len() {
            for c in 0..self.state[0].len() {
                let x: usize = (self.state[r][c] / 16) as usize;
                let y: usize = (self.state[r][c] % 16) as usize;
                self.state[r][c] = Aes::S_BOX[x][y];
            }
        }
    }

    fn shift_rows(&mut self) {
        let tmp = self.state.clone();
        for r in 0..4 {
            for c in 0..self.state[0].len() {
                self.state[r][c] = tmp[r][(c + r) % 4];
            }
        }
    }

    fn mul(a: u8, b: u8) -> u8 {
        let b: u16 = b as u16;
        let mut ret: u16 = 0;
        let mut tmp: u16 = a as u16;
        let mut bit: u16 = 1;
        while bit <= b {
            // mod 0x011b
            if 0x0100 & tmp != 0 {
                tmp ^= 0x011b;
            }
            if bit & b != 0 {
                ret ^= tmp;
            }
            bit <<= 1;
            tmp <<= 1;
        }
        ret as u8
    }

    fn mix_columns(&mut self) {
        let tmp = self.state.clone();
        for c in 0..self.state[0].len() {
            self.state[0][c] = Aes::mul(tmp[0][c], 2) ^ Aes::mul(tmp[1][c], 3) ^ tmp[2][c] ^ tmp[3][c];
            self.state[1][c] = tmp[0][c] ^ Aes::mul(tmp[1][c], 2) ^ Aes::mul(tmp[2][c], 3) ^ tmp[3][c];
            self.state[2][c] = tmp[0][c] ^ tmp[1][c] ^ Aes::mul(tmp[2][c], 2) ^ Aes::mul(tmp[3][c], 3);
            self.state[3][c] = Aes::mul(tmp[0][c], 3) ^ tmp[1][c] ^ tmp[2][c] ^ Aes::mul(tmp[3][c], 2);
        }
    }

    fn add_round_key(&mut self, round: usize) {
        for c in 0..self.nk {
            for r in 0..self.nb {
                self.state[r][c] ^= u32::to_be_bytes(self.round_keys[c+round*self.nk])[r];
            }
        }
    }

    fn sub_word(w: u32) -> u32 {
        let mut bytes: [u8; 4] = w.to_be_bytes();
        for i in 0..4 {
            let x: usize = (bytes[i] / 16) as usize;
            let y: usize = (bytes[i] % 16) as usize;
            bytes[i] = Aes::S_BOX[x][y];
        }
        return u32::from_be_bytes(bytes);
    }

    pub fn inv_cipher(&mut self) {
        self.add_round_key(self.nr);
        for round in (1..self.nr).rev() {
            self.inv_shift_rows();
            self.inv_sub_bytes();
            self.add_round_key(round);
            self.inv_mix_columns();
        }
        self.inv_shift_rows();
        self.inv_sub_bytes();
        self.add_round_key(0);
    }

    fn inv_shift_rows(&mut self) {
        let tmp = self.state.clone();
        for r in 0..4 {
            for c in 0..self.nk {
                self.state[r][c] = tmp[r][(c + (self.nk - r)) % 4];
            }
        }
    }
    fn inv_mix_columns(&mut self) {
        let tmp = self.state.clone();
        for c in 0..self.state[0].len() {
            self.state[0][c] = Aes::mul(tmp[0][c], 0x0e)
                ^ Aes::mul(tmp[1][c], 0x0b)
                ^ Aes::mul(tmp[2][c], 0x0d)
                ^ Aes::mul(tmp[3][c], 0x09);
            self.state[1][c] = Aes::mul(tmp[0][c], 0x09)
                ^ Aes::mul(tmp[1][c], 0x0e)
                ^ Aes::mul(tmp[2][c], 0x0b)
                ^ Aes::mul(tmp[3][c], 0x0d);
            self.state[2][c] = Aes::mul(tmp[0][c], 0x0d)
                ^ Aes::mul(tmp[1][c], 0x09)
                ^ Aes::mul(tmp[2][c], 0x0e)
                ^ Aes::mul(tmp[3][c], 0x0b);
            self.state[3][c] = Aes::mul(tmp[0][c], 0x0b)
                ^ Aes::mul(tmp[1][c], 0x0d)
                ^ Aes::mul(tmp[2][c], 0x09)
                ^ Aes::mul(tmp[3][c], 0x0e);
        }
    }

    fn inv_sub_bytes(&mut self) {
        for r in 0..self.state.len() {
            for c in 0..self.state[0].len() {
                let x: usize = (self.state[r][c] / 16) as usize;
                let y: usize = (self.state[r][c] % 16) as usize;
                self.state[r][c] = Aes::INV_S_BOX[x][y];
            }
        }
    }
}

#[test]
fn test_aes() {
    let input: Vec<Vec<u8>> = vec![
        vec![0x32, 0x88, 0x31, 0xe0],
        vec![0x43, 0x5a, 0x31, 0x37],
        vec![0xf6, 0x30, 0x98, 0x07],
        vec![0xa8, 0x8d, 0xa2, 0x34],
    ];
    let key: Vec<u32> = vec![
        0x2b7e_1516,
        0x28ae_d2a6,
        0xabf7_1588,
        0x09cf_4f3c,
    ];
    let mut aes = Aes::new(input.clone(), &key, 128);
    aes.cipher();
    let output: Vec<Vec<u8>> = vec![
        vec![0x39, 0x02, 0xdc, 0x19],
        vec![0x25, 0xdc, 0x11, 0x6a],
        vec![0x84, 0x09, 0x85, 0x0b],
        vec![0x1d, 0xfb, 0x97, 0x32],
    ];
    assert_eq!(aes.state, output);
    aes.inv_cipher();
    assert_eq!(aes.state, input.clone());
}

#[test]
fn test_inv_cipher() {
    let cipher: Vec<Vec<u8>> = vec![
        vec![0x39, 0x02, 0xdc, 0x19],
        vec![0x25, 0xdc, 0x11, 0x6a],
        vec![0x84, 0x09, 0x85, 0x0b],
        vec![0x1d, 0xfb, 0x97, 0x32],
    ];
    let key: Vec<u32> = vec![
        0x2b7e_1516,
        0x28ae_d2a6,
        0xabf7_1588,
        0x09cf_4f3c,
    ];
    let mut aes = Aes::new(cipher, &key, 128);
    aes.inv_cipher();
    let ret: Vec<Vec<u8>> = vec![
        vec![0x32, 0x88, 0x31, 0xe0],
        vec![0x43, 0x5a, 0x31, 0x37],
        vec![0xf6, 0x30, 0x98, 0x07],
        vec![0xa8, 0x8d, 0xa2, 0x34],
    ];
    assert_eq!(aes.state, ret);
}
